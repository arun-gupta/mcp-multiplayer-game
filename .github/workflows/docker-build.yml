name: Test, Build and Deploy Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: arungupta/mcp-multiplayer-game

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.13.0

    - name: Check Docker Hub status
      id: check-dockerhub
      if: github.event_name != 'pull_request'
      run: |
        echo "üîç Checking Docker Hub status..."
        if curl -s -f https://registry-1.docker.io/v2/ > /dev/null; then
          echo "‚úÖ Docker Hub is available"
          echo "docker_hub_available=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Docker Hub appears to be unavailable"
          echo "docker_hub_available=false" >> $GITHUB_OUTPUT
        fi

    - name: Debug Docker Hub authentication
      id: debug-auth
      if: github.event_name != 'pull_request'
      run: |
        echo "üîç Debugging Docker Hub authentication..."
        echo "Repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "Username configured: ${{ secrets.DOCKERHUB_USERNAME != '' }}"
        echo "Token configured: ${{ secrets.DOCKERHUB_TOKEN != '' }}"
        
        # Test authentication without revealing credentials
        if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
          echo "‚úÖ Both username and token are configured"
          
          # Test Docker Hub login
          if echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin; then
            echo "‚úÖ Docker Hub authentication successful"
            echo "auth_ok=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Docker Hub login failed"
            echo "Possible issues:"
            echo "  - Invalid username or token"
            echo "  - Token expired or revoked"
            echo "  - Repository doesn't exist"
            echo "  - Insufficient permissions"
            echo "auth_ok=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ùå Missing Docker Hub credentials"
          echo "Please configure DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets"
          echo "auth_ok=false" >> $GITHUB_OUTPUT
        fi

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request' && steps.check-dockerhub.outputs.docker_hub_available == 'true' && steps.debug-auth.outputs.auth_ok == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        logout: true

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and test Docker image (with registry cache)
      id: build-with-cache
      uses: docker/build-push-action@v5
      timeout-minutes: 10
      continue-on-error: true
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Use GitHub Actions cache as primary, fallback to registry cache
        cache-from: |
          type=gha
          type=gha,scope=deps
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
        cache-to: |
          type=gha,mode=max
          type=gha,mode=max,scope=deps
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max
        platforms: linux/amd64
        build-args: |
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        # Build only for AMD64 for fastest builds and maximum compatibility

    - name: Build and test Docker image (fallback - no registry cache)
      if: steps.build-with-cache.outcome == 'failure'
      uses: docker/build-push-action@v5
      timeout-minutes: 10
      with:
        context: .
        push: false  # Don't push when Docker Hub is down
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Use only GitHub Actions cache when registry is unavailable
        cache-from: |
          type=gha
          type=gha,scope=deps
        cache-to: |
          type=gha,mode=max
          type=gha,mode=max,scope=deps
        platforms: linux/amd64
        build-args: |
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        # Build only for AMD64 for fastest builds and maximum compatibility

  deploy:
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Deploy notification
      run: |
        if [ "${{ steps.build-with-cache.outcome }}" == "success" ]; then
          echo "üöÄ Docker image deployed successfully with registry cache!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Tags: ${{ needs.test-and-build.outputs.tags }}"
        else
          echo "‚ö†Ô∏è Docker image built successfully (fallback build - no registry cache)"
          echo "Note: Docker Hub was unavailable, used GitHub Actions cache only"
          echo "Image was built but not pushed due to Docker Hub outage"
          echo "To deploy when Docker Hub is back:"
          echo "1. Ensure Docker Hub credentials are configured"
          echo "2. Create repository: arungupta/mcp-multiplayer-game"
          echo "3. Trigger a new build"
        fi
