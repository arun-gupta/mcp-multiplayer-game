name: Test, Build and Deploy Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: arungupta/mcp-multiplayer-game

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.13.0

    - name: Check Docker Hub status
      id: check-dockerhub
      if: github.event_name != 'pull_request'
      run: |
        echo "🔍 Checking Docker Hub status..."
        if curl -s -f https://registry-1.docker.io/v2/ > /dev/null; then
          echo "✅ Docker Hub is available"
          echo "docker_hub_available=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Docker Hub appears to be unavailable"
          echo "docker_hub_available=false" >> $GITHUB_OUTPUT
        fi
        
        # Also check GitHub Actions cache availability
        echo "🔍 Checking GitHub Actions cache status..."
        if [ -d "$RUNNER_TEMP" ] && [ -w "$RUNNER_TEMP" ]; then
          echo "✅ GitHub Actions cache appears available"
          echo "gha_cache_available=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ GitHub Actions cache may be unavailable"
          echo "gha_cache_available=false" >> $GITHUB_OUTPUT
        fi

    - name: Debug Docker Hub authentication
      id: debug-auth
      if: github.event_name != 'pull_request'
      run: |
        echo "🔍 Debugging Docker Hub authentication..."
        echo "Repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "Username configured: ${{ secrets.DOCKERHUB_USERNAME != '' }}"
        echo "Token configured: ${{ secrets.DOCKERHUB_TOKEN != '' }}"
        
        # Test authentication without revealing credentials
        if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
          echo "✅ Both username and token are configured"
          
          # Test Docker Hub login
          if echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin; then
            echo "✅ Docker Hub authentication successful"
            echo "auth_ok=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Docker Hub login failed"
            echo "Possible issues:"
            echo "  - Invalid username or token"
            echo "  - Token expired or revoked"
            echo "  - Repository doesn't exist"
            echo "  - Insufficient permissions"
            echo "auth_ok=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "❌ Missing Docker Hub credentials"
          echo "Please configure DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets"
          echo "auth_ok=false" >> $GITHUB_OUTPUT
        fi

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request' && steps.check-dockerhub.outputs.docker_hub_available == 'true' && steps.debug-auth.outputs.auth_ok == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        logout: true

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and test Docker image (with full cache)
      id: build-with-cache
      if: steps.check-dockerhub.outputs.docker_hub_available == 'true' && steps.check-dockerhub.outputs.gha_cache_available == 'true'
      uses: docker/build-push-action@v5
      timeout-minutes: 10
      continue-on-error: true
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Use full caching when all services are available
        cache-from: |
          type=gha
          type=gha,scope=deps
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
        cache-to: |
          type=gha,mode=max
          type=gha,mode=max,scope=deps
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max
        platforms: linux/amd64
        build-args: |
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        # Build only for AMD64 for fastest builds and maximum compatibility
        provenance: false
        # Suppress cache-related warnings
        outputs: type=docker,dest=/tmp/image.tar

    - name: Build and test Docker image (fallback - GitHub Actions cache only)
      id: build-fallback
      if: (steps.build-with-cache.outcome == 'failure' || steps.build-with-cache.outcome == 'skipped') && steps.check-dockerhub.outputs.gha_cache_available == 'true'
      uses: docker/build-push-action@v5
      timeout-minutes: 10
      continue-on-error: true
      with:
        context: .
        push: false  # Don't push when Docker Hub is down
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Use only GitHub Actions cache when registry is unavailable
        cache-from: |
          type=gha
          type=gha,scope=deps
        cache-to: |
          type=gha,mode=max
          type=gha,mode=max,scope=deps
        platforms: linux/amd64
        build-args: |
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        # Build only for AMD64 for fastest builds and maximum compatibility
        provenance: false

    - name: Build and test Docker image (ultimate fallback - no cache)
      id: build-ultimate
      if: (steps.build-with-cache.outcome == 'failure' || steps.build-with-cache.outcome == 'skipped') && (steps.build-fallback.outcome == 'failure' || steps.build-fallback.outcome == 'skipped')
      uses: docker/build-push-action@v5
      timeout-minutes: 15
      with:
        context: .
        push: false  # Don't push when Docker Hub is down
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # No cache at all - ultimate fallback
        platforms: linux/amd64
        build-args: |
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        # Build only for AMD64 for fastest builds and maximum compatibility
        # No cache operations to avoid any service dependencies
        provenance: false

    - name: Ensure build completed
      id: build-status
      if: always()
      run: |
        echo "🔍 Checking build completion status..."
        echo "Build with cache outcome: ${{ steps.build-with-cache.outcome }}"
        echo "Build fallback outcome: ${{ steps.build-fallback.outcome }}"
        echo "Build ultimate outcome: ${{ steps.build-ultimate.outcome }}"
        
        # Check if any build step succeeded
        if [ "${{ steps.build-with-cache.outcome }}" == "success" ]; then
          echo "✅ Build with cache succeeded"
          echo "build_success=true" >> $GITHUB_OUTPUT
          echo "build_type=cache" >> $GITHUB_OUTPUT
        elif [ "${{ steps.build-fallback.outcome }}" == "success" ]; then
          echo "✅ Build fallback succeeded"
          echo "build_success=true" >> $GITHUB_OUTPUT
          echo "build_type=fallback" >> $GITHUB_OUTPUT
        elif [ "${{ steps.build-ultimate.outcome }}" == "success" ]; then
          echo "✅ Build ultimate succeeded"
          echo "build_success=true" >> $GITHUB_OUTPUT
          echo "build_type=ultimate" >> $GITHUB_OUTPUT
        else
          echo "❌ All build attempts failed"
          echo "build_success=false" >> $GITHUB_OUTPUT
          echo "build_type=none" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Build summary
      if: always()
      run: |
        echo ""
        echo "🎯 BUILD SUMMARY"
        echo "================"
        echo "Service Status:"
        echo "  - Docker Hub: ${{ steps.check-dockerhub.outputs.docker_hub_available }}"
        echo "  - GitHub Actions Cache: ${{ steps.check-dockerhub.outputs.gha_cache_available }}"
        echo ""
        echo "Build Results:"
        echo "  - Full Cache Build: ${{ steps.build-with-cache.outcome }}"
        echo "  - Fallback Build: ${{ steps.build-fallback.outcome }}"
        echo "  - Ultimate Build: ${{ steps.build-ultimate.outcome }}"
        echo ""
        echo "Final Status: ${{ steps.build-status.outputs.build_success }}"
        echo "Build Type: ${{ steps.build-status.outputs.build_type }}"
        echo ""
        if [ "${{ steps.build-status.outputs.build_success }}" == "true" ]; then
          echo "✅ BUILD SUCCESSFUL - Image was built successfully!"
        else
          echo "❌ BUILD FAILED - All build attempts failed"
        fi

  deploy:
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Deploy notification
      run: |
        echo "🔍 Build status: ${{ steps.build-status.outputs.build_success }}"
        echo "🔍 Build type: ${{ steps.build-status.outputs.build_type }}"
        
        if [ "${{ steps.build-status.outputs.build_success }}" == "true" ]; then
          case "${{ steps.build-status.outputs.build_type }}" in
            "cache")
              echo "🚀 Docker image deployed successfully with full cache!"
              echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
              echo "Tags: ${{ needs.test-and-build.outputs.tags }}"
              ;;
            "fallback")
              echo "⚠️ Docker image built successfully (GitHub Actions cache only)"
              echo "Note: Docker Hub was unavailable, used GitHub Actions cache only"
              echo "Image was built but not pushed due to Docker Hub outage"
              echo "To deploy when Docker Hub is back:"
              echo "1. Ensure Docker Hub credentials are configured"
              echo "2. Create repository: arungupta/mcp-multiplayer-game"
              echo "3. Trigger a new build"
              ;;
            "ultimate")
              echo "⚠️ Docker image built successfully (no cache - ultimate fallback)"
              echo "Note: All cache services were unavailable, built without caching"
              echo "Image was built but not pushed due to service outages"
              echo "Build completed successfully despite service issues"
              echo "To deploy when services are back:"
              echo "1. Ensure Docker Hub credentials are configured"
              echo "2. Create repository: arungupta/mcp-multiplayer-game"
              echo "3. Trigger a new build"
              ;;
            *)
              echo "❌ Unknown build type: ${{ steps.build-status.outputs.build_type }}"
              exit 1
              ;;
          esac
        else
          echo "❌ All build attempts failed"
          echo "Please check the build logs for details"
          exit 1
        fi
